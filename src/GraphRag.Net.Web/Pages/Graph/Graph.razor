@namespace GraphRag.Net.Web.Pages.Demo
@page "/Graph"

<div id="graph">
    <div style="height:calc(100vh - 30px);width:100%;border:#eeeeee solid 1px;">
        <relation-graph ref="seeksRelationGraph"
                        :options="graphOptions"
                        :on-node-click="onNodeClick" />
    </div>
</div>
<Modal Title="@nodeTitle" Visible="@isModalVisible" OnOk="HandleOk" OnCancel="HandleCancel">
    @nodeDescription
</Modal>
<!-- Include relation-graph -->
<script src="./js/vue2.js"></script>
<script src="./js/screenfull.min.js"></script>
<script src="./js/html2canvas.min.js"></script>
<script src="./js/relation-graph.umd.js"></script>

<script>
    // window.onload = function () {
    //      // Wait for Blazor initialization to complete
    //    Blazor.start().then(function () {
    //       initializeVueApp(dotNetHelper);
    //    });
    // };
    function initializeVueApp(dotNetHelper) {
        let graph = new Vue({
            el: '#graph',
            data: {
                message: 'Hello Vue!',
                graphOptions: {
                    defaultJunctionPoint: 'border'
                    // You can refer to the parameters in "Graph Map" for configuration
                }
            },
            mounted() {
                this.showRelationGraph();
            },
            methods: {
                showRelationGraph() {

                    console.log('ref:btn:', this.$refs.btn);
                    console.log('ref:', this.$refs.seeksRelationGraph);
                    const url = new URL(window.location.href);

                    // Get the query string part
                    const queryString = url.search;

                    // Parse the query string into a URLSearchParams object
                    const urlParams = new URLSearchParams(queryString);

                    // Get the parameter value, e.g. 'index'
                    const index = urlParams.get('index');
                    fetch('/api/Graph/GetAllGraphs?index=' + index)
                        .then(response => {
                            if (!response.ok) {
                                throw new Error('Network response was not successful, status code: ' + response.status);
                            }
                            return response.json(); // or response.json() depending on your response content type
                        })
                        .then(data => {
                            // Request successful, handle response data
                            console.log(data);
                            this.$refs.seeksRelationGraph.setJsonData(data, (seeksRGGraph) => {
                                // Write code here that needs to be executed after the graph initialization is complete
                            });
                        })
                        .catch(error => {
                            // Handle errors
                            console.error('Request error:', error);
                        });
                },
                onNodeClick(nodeObject, $event) {
                     dotNetHelper.invokeMethodAsync('ShowNodeDescription',nodeObject.text, nodeObject.data.desc);
                }
            }
        })
    }
</script>

@code
{
    [Inject]
    protected IJSRuntime _jsRuntime { get; set; }

    private bool isModalVisible = false;
    private string nodeDescription = string.Empty;
    private string nodeTitle = string.Empty;

    private DotNetObjectReference<Graph> objRef;

    [JSInvokable("ShowNodeDescription")]
    public void ShowNodeDescription(string title, string description)
    {
        nodeTitle = title;
        nodeDescription = description;
        isModalVisible = true;
        StateHasChanged();
    }

    private void HandleOk()
    {
        isModalVisible = false;
    }

    private void HandleCancel()
    {
        isModalVisible = false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Ensure all scripts are loaded before calling the JavaScript function to initialize Vue
            await Task.Delay(500); // Short delay
            objRef = DotNetObjectReference.Create(this);
            try
            {
                await _jsRuntime.InvokeVoidAsync("initializeVueApp", objRef);
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }
    }

    public void Dispose()
    {
        objRef?.Dispose();
    }
}